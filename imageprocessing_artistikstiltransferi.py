# -*- coding: utf-8 -*-
"""imageprocessing_artistikstiltransferi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tkMdz000jxGk9-swwI_U21mLpKoa4q1J
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt
from google.colab import files
from PIL import Image
import io
from skimage.metrics import structural_similarity as ssim

# -------------------- Metrik Fonksiyonlarƒ± --------------------

def compute_ssim(img1, img2):
    gray1 = cv2.cvtColor(img1, cv2.COLOR_BGR2GRAY)
    gray2 = cv2.cvtColor(img2, cv2.COLOR_BGR2GRAY)
    return ssim(gray1, gray2)

def compute_hist_similarity(img1, img2):
    img1_hsv = cv2.cvtColor(img1, cv2.COLOR_BGR2HSV)
    img2_hsv = cv2.cvtColor(img2, cv2.COLOR_BGR2HSV)
    sim = 0
    for ch in range(3):
        hist1 = cv2.calcHist([img1_hsv], [ch], None, [256], [0, 256])
        hist2 = cv2.calcHist([img2_hsv], [ch], None, [256], [0, 256])
        hist1 = hist1 / (np.sum(hist1) + 1e-8)
        hist2 = hist2 / (np.sum(hist2) + 1e-8)
        bc = np.sum(np.sqrt(hist1 * hist2))
        sim += bc
    return sim / 3

# -------------------- G√∂rsel ƒ∞≈üleme --------------------

def upload_and_name_styles():
    print("üé® L√ºtfen stil g√∂rsellerini y√ºkleyin:")
    uploaded = files.upload()
    style_dict = {}
    for filename, filedata in uploaded.items():
        img = cv2.imdecode(np.frombuffer(filedata, np.uint8), cv2.IMREAD_COLOR)
        img = cv2.resize(img, (512, 512))
        name = input(f"üñåÔ∏è '{filename}' i√ßin stil ismi giriniz (√∂rn: Van Gogh Yaƒülƒ± Boya): ")
        style_dict[name] = img
    return style_dict

def upload_content_image():
    print("\nüì§ Yeni i√ßerik g√∂rseli y√ºkleyin:")
    uploaded = files.upload()
    filename = next(iter(uploaded))
    img = cv2.imdecode(np.frombuffer(uploaded[filename], np.uint8), cv2.IMREAD_COLOR)
    return cv2.resize(img, (512, 512)), filename

def match_histograms_hsv(source, reference):
    source_hsv = cv2.cvtColor(source, cv2.COLOR_BGR2HSV)
    ref_hsv = cv2.cvtColor(reference, cv2.COLOR_BGR2HSV)
    matched = np.zeros_like(source_hsv)
    for i in range(3):
        src_hist, _ = np.histogram(source_hsv[..., i].flatten(), 256, [0, 256])
        ref_hist, _ = np.histogram(ref_hsv[..., i].flatten(), 256, [0, 256])
        src_cdf = np.cumsum(src_hist).astype(np.float32) / src_hist.sum()
        ref_cdf = np.cumsum(ref_hist).astype(np.float32) / ref_hist.sum()
        mapping = np.interp(src_cdf, ref_cdf, np.arange(256))
        matched[..., i] = cv2.LUT(source_hsv[..., i], mapping.astype(np.uint8))
    return cv2.cvtColor(matched, cv2.COLOR_HSV2BGR)

def extract_edges(img):
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    edges = cv2.Canny(gray, 100, 200)
    blurred = cv2.GaussianBlur(edges, (7, 7), sigmaX=3)
    return cv2.cvtColor(blurred, cv2.COLOR_GRAY2BGR)

def overlay_edges(img, edge_map, alpha=0.1):
    return cv2.addWeighted(img, 1.0, edge_map, alpha, 0)

def stylize(content_img, style_img):
    hist_matched = match_histograms_hsv(content_img, style_img)
    stylized = cv2.bilateralFilter(hist_matched, d=9, sigmaColor=75, sigmaSpace=75)
    edge_map = extract_edges(content_img)
    return overlay_edges(stylized, edge_map, alpha=0.1)

# -------------------- Ana Akƒ±≈ü --------------------

style_dict = upload_and_name_styles()

print("\n‚úÖ Stil k√ºt√ºphanesi olu≈üturuldu. ≈ûimdi i√ßerik g√∂rsellerini y√ºkleyip i≈üleyebilirsiniz.")
print("‚èπÔ∏è Yazmak istediƒüinizde sadece `bitir` yazƒ±n.")

while True:
    user_input = input("\nYeni i√ßerik g√∂rseli i≈ülemek istiyor musunuz? (evet / bitir): ").strip().lower()
    if user_input == "bitir":
        print("‚úÖ ƒ∞≈ülem tamamlandƒ±. Kod sonlandƒ±rƒ±ldƒ±.")
        break
    elif user_input != "evet":
        print("‚ö†Ô∏è L√ºtfen sadece 'evet' ya da 'bitir' yazƒ±nƒ±z.")
        continue

    content_img, content_filename = upload_content_image()

    print("\nüß† Kullanƒ±labilir Stil Se√ßenekleri:")
    for idx, name in enumerate(style_dict.keys()):
        print(f"{idx + 1}. {name}")

    try:
        choice = int(input("Uygulanacak stilin numarasƒ±nƒ± se√ßin: ")) - 1
        style_name = list(style_dict.keys())[choice]
    except:
        print("‚ö†Ô∏è Ge√ßersiz se√ßim. Stil uygulanamadƒ±.")
        continue

    style_img = style_dict[style_name]
    result_img = stylize(content_img, style_img)

    # Metrik Hesapla
    ssim_score = compute_ssim(content_img, result_img)
    hist_score = compute_hist_similarity(style_img, result_img)
    print(f"üìä SSIM (i√ßeriƒüe g√∂re): {ssim_score:.4f}")
    print(f"üé® HistSim (stile g√∂re): {hist_score:.4f}")

    # G√∂rsel G√∂ster
    fig, ax = plt.subplots(1, 3, figsize=(15, 6))
    ax[0].imshow(cv2.cvtColor(content_img, cv2.COLOR_BGR2RGB)); ax[0].set_title("Content"); ax[0].axis("off")
    ax[1].imshow(cv2.cvtColor(style_img, cv2.COLOR_BGR2RGB)); ax[1].set_title(f"Style: {style_name}"); ax[1].axis("off")
    ax[2].imshow(cv2.cvtColor(result_img, cv2.COLOR_BGR2RGB))
    ax[2].set_title(f"Stylized Output\nSSIM: {ssim_score:.3f} | HistSim: {hist_score:.3f}")
    ax[2].axis("off")
    plt.tight_layout()
    plt.show()

import cv2
import numpy as np
import matplotlib.pyplot as plt
from google.colab import files
from skimage.metrics import structural_similarity as ssim

# Gabor filtrelerini uygula (stil g√∂rseli √ºzerinden)
def extract_gabor_texture(image, ksize=31):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    accum = np.zeros_like(gray, dtype=np.float32)
    for theta in np.arange(0, np.pi, np.pi / 4):
        kernel = cv2.getGaborKernel((ksize, ksize), 4.0, theta, 10.0, 0.5, 0, ktype=cv2.CV_32F)
        fimg = cv2.filter2D(gray, cv2.CV_32F, kernel)
        accum += np.abs(fimg)
    accum = cv2.normalize(accum, None, 0, 255, cv2.NORM_MINMAX)
    texture = cv2.cvtColor(accum.astype(np.uint8), cv2.COLOR_GRAY2BGR)
    return texture

# Histogram e≈üle≈ütirme (HSV)
def match_histograms_hsv(source, reference):
    source_hsv = cv2.cvtColor(source, cv2.COLOR_BGR2HSV)
    ref_hsv = cv2.cvtColor(reference, cv2.COLOR_BGR2HSV)
    matched = np.zeros_like(source_hsv)
    for i in range(3):
        src_hist, _ = np.histogram(source_hsv[..., i].flatten(), 256, [0, 256])
        ref_hist, _ = np.histogram(ref_hsv[..., i].flatten(), 256, [0, 256])
        src_cdf = np.cumsum(src_hist).astype(np.float32) / src_hist.sum()
        ref_cdf = np.cumsum(ref_hist).astype(np.float32) / ref_hist.sum()
        mapping = np.interp(src_cdf, ref_cdf, np.arange(256))
        matched[..., i] = cv2.LUT(source_hsv[..., i], mapping.astype(np.uint8))
    return cv2.cvtColor(matched, cv2.COLOR_HSV2BGR)

# Kenar √ßƒ±karƒ±mƒ± ve bindirme
def extract_edges(img):
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    edges = cv2.Canny(gray, 100, 200)
    blurred = cv2.GaussianBlur(edges, (7, 7), sigmaX=3)
    return cv2.cvtColor(blurred, cv2.COLOR_GRAY2BGR)

def overlay_edges(img, edge_map, alpha=0.15):
    return cv2.addWeighted(img, 1.0, edge_map, alpha, 0)

# Stil aktarƒ±mƒ± (Gabor + HSV + Edge Fusion)
def stylize_with_gabor(content_img, style_img):
    hist_matched = match_histograms_hsv(content_img, style_img)
    gabor_texture = extract_gabor_texture(style_img)
    combined = cv2.addWeighted(hist_matched, 0.6, gabor_texture, 0.4, 0)
    smoothed = cv2.bilateralFilter(combined, d=9, sigmaColor=75, sigmaSpace=75)
    edge_map = extract_edges(content_img)
    final = overlay_edges(smoothed, edge_map, alpha=0.15)
    return final

# --- Metrik Fonksiyonlarƒ± ---

def compute_ssim(img1, img2):
    gray1 = cv2.cvtColor(img1, cv2.COLOR_BGR2GRAY)
    gray2 = cv2.cvtColor(img2, cv2.COLOR_BGR2GRAY)
    return ssim(gray1, gray2)

def compute_hist_similarity(img1, img2):
    img1_hsv = cv2.cvtColor(img1, cv2.COLOR_BGR2HSV)
    img2_hsv = cv2.cvtColor(img2, cv2.COLOR_BGR2HSV)
    sim = 0
    for ch in range(3):
        hist1 = cv2.calcHist([img1_hsv], [ch], None, [256], [0, 256])
        hist2 = cv2.calcHist([img2_hsv], [ch], None, [256], [0, 256])

        # Doƒüru normalize et (L1 normu: toplam = 1)
        hist1 = hist1 / (np.sum(hist1) + 1e-8)
        hist2 = hist2 / (np.sum(hist2) + 1e-8)

        bc = np.sum(np.sqrt(hist1 * hist2))  # Bhattacharyya coefficient ‚àà [0,1]
        sim += bc
    return sim / 3  # Ortalama 3 kanal benzerliƒüi



# Stil ve i√ßerik y√ºkle
def load_image(title="G√∂rsel se√ßin"):
    print(f"\nüì§ {title}")
    uploaded = files.upload()
    fname = next(iter(uploaded))
    img = cv2.imdecode(np.frombuffer(uploaded[fname], np.uint8), cv2.IMREAD_COLOR)
    return cv2.resize(img, (512, 512)), fname

# Ana akƒ±≈ü
style_img, _ = load_image("üé® Stil g√∂rselini y√ºkleyin")
content_img, _ = load_image("üñºÔ∏è ƒ∞√ßerik g√∂rselini y√ºkleyin")

result = stylize_with_gabor(content_img, style_img)

# Metrikleri hesapla
ssim_score = compute_ssim(content_img, result)
hist_sim = compute_hist_similarity(style_img, result)

# Sonu√ßlarƒ± g√∂ster
fig, ax = plt.subplots(1, 3, figsize=(15, 6))
ax[0].imshow(cv2.cvtColor(content_img, cv2.COLOR_BGR2RGB)); ax[0].set_title("Content"); ax[0].axis("off")
ax[1].imshow(cv2.cvtColor(style_img, cv2.COLOR_BGR2RGB)); ax[1].set_title("Style (Gabor)"); ax[1].axis("off")
ax[2].imshow(cv2.cvtColor(result, cv2.COLOR_BGR2RGB)); ax[2].set_title(f"Stylized Output\nSSIM: {ssim_score:.3f} | HistSim: {hist_sim:.3f}"); ax[2].axis("off")
plt.tight_layout()
plt.show()

import cv2
import numpy as np
import matplotlib.pyplot as plt
from google.colab import files
from skimage.metrics import structural_similarity as ssim

# -------------------- Metrik Fonksiyonlarƒ± --------------------

def compute_ssim(img1, img2):
    gray1 = cv2.cvtColor(img1, cv2.COLOR_BGR2GRAY)
    gray2 = cv2.cvtColor(img2, cv2.COLOR_BGR2GRAY)
    return ssim(gray1, gray2)

def compute_hist_similarity(img1, img2):
    img1_hsv = cv2.cvtColor(img1, cv2.COLOR_BGR2HSV)
    img2_hsv = cv2.cvtColor(img2, cv2.COLOR_BGR2HSV)
    sim = 0
    for ch in range(3):
        hist1 = cv2.calcHist([img1_hsv], [ch], None, [256], [0, 256])
        hist2 = cv2.calcHist([img2_hsv], [ch], None, [256], [0, 256])
        hist1 = hist1 / (np.sum(hist1) + 1e-8)
        hist2 = hist2 / (np.sum(hist2) + 1e-8)
        bc = np.sum(np.sqrt(hist1 * hist2))
        sim += bc
    return sim / 3

# -------------------- FFT Tabanlƒ± Stil Aktarƒ±mƒ± --------------------

def fft_style_transfer(content_img, style_img):
    content_gray = cv2.cvtColor(content_img, cv2.COLOR_BGR2GRAY)
    style_gray = cv2.cvtColor(style_img, cv2.COLOR_BGR2GRAY)
    f_content = np.fft.fft2(content_gray)
    f_style = np.fft.fft2(style_gray)
    mag_content = np.abs(f_content)
    phase_style = np.angle(f_style)
    combined = mag_content * np.exp(1j * phase_style)
    stylized_gray = np.fft.ifft2(combined).real
    stylized_gray = np.clip(stylized_gray, 0, 255).astype(np.uint8)
    stylized = cv2.cvtColor(stylized_gray, cv2.COLOR_GRAY2BGR)
    return stylized

def extract_edges(img):
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    edges = cv2.Canny(gray, 100, 200)
    blurred = cv2.GaussianBlur(edges, (7, 7), sigmaX=2)
    return cv2.cvtColor(blurred, cv2.COLOR_GRAY2BGR)

def overlay_edges(img, edge_map, alpha=0.15):
    return cv2.addWeighted(img, 1.0, edge_map, alpha, 0)

def stylize_with_fft(content_img, style_img):
    base = fft_style_transfer(content_img, style_img)
    edge_map = extract_edges(content_img)
    result = overlay_edges(base, edge_map, alpha=0.15)
    return result

def load_image(title="G√∂rsel se√ßin"):
    print(f"\nüì§ {title}")
    uploaded = files.upload()
    fname = next(iter(uploaded))
    img = cv2.imdecode(np.frombuffer(uploaded[fname], np.uint8), cv2.IMREAD_COLOR)
    return cv2.resize(img, (512, 512)), fname

# -------------------- Ana Akƒ±≈ü --------------------

style_img, _ = load_image("üé® Stil g√∂rselini y√ºkleyin")
content_img, _ = load_image("üñºÔ∏è ƒ∞√ßerik g√∂rselini y√ºkleyin")

result = stylize_with_fft(content_img, style_img)

# Metrik Hesapla
ssim_score = compute_ssim(content_img, result)
hist_score = compute_hist_similarity(style_img, result)
print(f"üìä SSIM (i√ßeriƒüe g√∂re): {ssim_score:.4f}")
print(f"üé® HistSim (stile g√∂re): {hist_score:.4f}")

# Sonu√ßlarƒ± g√∂ster
fig, ax = plt.subplots(1, 3, figsize=(15, 6))
ax[0].imshow(cv2.cvtColor(content_img, cv2.COLOR_BGR2RGB)); ax[0].set_title("Content"); ax[0].axis("off")
ax[1].imshow(cv2.cvtColor(style_img, cv2.COLOR_BGR2RGB)); ax[1].set_title("Style (FFT Phase)"); ax[1].axis("off")
ax[2].imshow(cv2.cvtColor(result, cv2.COLOR_BGR2RGB))
ax[2].set_title(f"Stylized Output (FFT)\nSSIM: {ssim_score:.3f} | HistSim: {hist_score:.3f}")
ax[2].axis("off")
plt.tight_layout()
plt.show()

import cv2
import numpy as np
import matplotlib.pyplot as plt
from google.colab import files
from skimage.metrics import structural_similarity as ssim

# -------------------- Metrik Fonksiyonlarƒ± --------------------

def compute_ssim(img1, img2):
    gray1 = cv2.cvtColor(img1, cv2.COLOR_BGR2GRAY)
    gray2 = cv2.cvtColor(img2, cv2.COLOR_BGR2GRAY)
    return ssim(gray1, gray2)

def compute_hist_similarity(img1, img2):
    img1_hsv = cv2.cvtColor(img1, cv2.COLOR_BGR2HSV)
    img2_hsv = cv2.cvtColor(img2, cv2.COLOR_BGR2HSV)
    sim = 0
    for ch in range(3):
        hist1 = cv2.calcHist([img1_hsv], [ch], None, [256], [0, 256])
        hist2 = cv2.calcHist([img2_hsv], [ch], None, [256], [0, 256])
        hist1 = hist1 / (np.sum(hist1) + 1e-8)
        hist2 = hist2 / (np.sum(hist2) + 1e-8)
        bc = np.sum(np.sqrt(hist1 * hist2))
        sim += bc
    return sim / 3

# -------------------- Stil Aktarƒ±m Fonksiyonlarƒ± --------------------

def extract_edge_map(img, method="canny"):
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    if method == "canny":
        edge = cv2.Canny(gray, 100, 200)
    elif method == "sobel":
        grad_x = cv2.Sobel(gray, cv2.CV_64F, 1, 0, ksize=3)
        grad_y = cv2.Sobel(gray, cv2.CV_64F, 0, 1, ksize=3)
        edge = cv2.convertScaleAbs(np.sqrt(grad_x**2 + grad_y**2))
    elif method == "laplacian":
        edge = cv2.Laplacian(gray, cv2.CV_64F)
        edge = cv2.convertScaleAbs(edge)
    else:
        raise ValueError("Ge√ßersiz kenar y√∂ntemi")
    blurred = cv2.GaussianBlur(edge, (5, 5), sigmaX=2)
    return cv2.cvtColor(blurred, cv2.COLOR_GRAY2BGR)

def match_histograms_hsv(source, reference):
    source_hsv = cv2.cvtColor(source, cv2.COLOR_BGR2HSV)
    ref_hsv = cv2.cvtColor(reference, cv2.COLOR_BGR2HSV)
    matched = np.zeros_like(source_hsv)
    for i in range(3):
        src_hist, _ = np.histogram(source_hsv[..., i].flatten(), 256, [0, 256])
        ref_hist, _ = np.histogram(ref_hsv[..., i].flatten(), 256, [0, 256])
        src_cdf = np.cumsum(src_hist).astype(np.float32) / src_hist.sum()
        ref_cdf = np.cumsum(ref_hist).astype(np.float32) / ref_hist.sum()
        mapping = np.interp(src_cdf, ref_cdf, np.arange(256))
        matched[..., i] = cv2.LUT(source_hsv[..., i], mapping.astype(np.uint8))
    return cv2.cvtColor(matched, cv2.COLOR_HSV2BGR)

def overlay_edges(img, edge_map, alpha=0.1):
    return cv2.addWeighted(img, 1.0, edge_map, alpha, 0)

def stylize_with_edge_variant(content_img, style_img, edge_method):
    hist_matched = match_histograms_hsv(content_img, style_img)
    edge_map = extract_edge_map(content_img, method=edge_method)
    stylized = overlay_edges(hist_matched, edge_map, alpha=0.12)
    return stylized

# -------------------- G√∂rsel Y√ºkleme --------------------

def load_image(title="G√∂rsel se√ßin"):
    print(f"\nüì§ {title}")
    uploaded = files.upload()
    fname = next(iter(uploaded))
    img = cv2.imdecode(np.frombuffer(uploaded[fname], np.uint8), cv2.IMREAD_COLOR)
    return cv2.resize(img, (512, 512)), fname

# -------------------- Ana Akƒ±≈ü --------------------

style_img, _ = load_image("üé® Stil g√∂rselini y√ºkleyin")
content_img, _ = load_image("üñºÔ∏è ƒ∞√ßerik g√∂rselini y√ºkleyin")

methods = ["canny", "sobel", "laplacian"]
results = {}
metrics = {}

for method in methods:
    result = stylize_with_edge_variant(content_img, style_img, method)
    results[method] = result
    ssim_val = compute_ssim(content_img, result)
    hist_val = compute_hist_similarity(style_img, result)
    metrics[method] = (ssim_val, hist_val)
    print(f"üîé {method.upper()} ‚Üí SSIM: {ssim_val:.4f}, HistSim: {hist_val:.4f}")

# -------------------- G√∂rsel Kar≈üƒ±la≈ütƒ±rmasƒ± --------------------

fig, ax = plt.subplots(1, 4, figsize=(18, 6))
ax[0].imshow(cv2.cvtColor(content_img, cv2.COLOR_BGR2RGB)); ax[0].set_title("Content"); ax[0].axis("off")

for i, method in enumerate(methods):
    result_img = results[method]
    ssim_val, hist_val = metrics[method]
    ax[i + 1].imshow(cv2.cvtColor(result_img, cv2.COLOR_BGR2RGB))
    ax[i + 1].set_title(f"{method.capitalize()}\nSSIM: {ssim_val:.3f}\nHistSim: {hist_val:.3f}")
    ax[i + 1].axis("off")

plt.tight_layout()
plt.show()